#!/usr/bin/env python3
"""
HTML Documentation Generator
Converts template data to HTML pages for MkDocs
"""

import os
import json
from datetime import datetime
from pathlib import Path


class HTMLDocGenerator:
    def __init__(self, templates_dir="html_templates", output_dir="html_templates"):
        self.templates_dir = Path(templates_dir)
        self.output_dir = Path(output_dir)
        self.base_template = self.load_base_template()
        
    def load_base_template(self):
        """Load the base HTML template structure"""
        base_template_path = self.templates_dir / "base.html"
        if base_template_path.exists():
            return base_template_path.read_text()
        return None
    
    def generate_page(self, page_config):
        """Generate an HTML page from configuration"""
        page_name = page_config["name"]
        title = page_config["title"]
        icon = page_config.get("icon", "fas fa-file-alt")
        content = page_config["content"]
        breadcrumb = page_config.get("breadcrumb", title)
        
        # Generate navigation with active state
        nav_items = [
            {"name": "index.html", "title": "Home", "icon": "fas fa-home"},
            {"name": "architecture.html", "title": "Architecture", "icon": "fas fa-sitemap"},
            {"name": "api.html", "title": "API Reference", "icon": "fas fa-code"},
            {"name": "ai_models.html", "title": "AI Models", "icon": "fas fa-robot"},
            {"name": "ai_pipelines.html", "title": "AI Pipelines", "icon": "fas fa-flow-chart"},
            {"name": "onboarding.html", "title": "Onboarding", "icon": "fas fa-user-plus"},
            {"name": "complexity.html", "title": "Code Quality", "icon": "fas fa-chart-line"},
        ]
        
        nav_html = ""
        for item in nav_items:
            active_class = " active" if item["name"] == page_name else ""
            nav_html += f'            <li><a href="{item["name"]}" class="nav-link{active_class}"><i class="{item["icon"]}"></i> {item["title"]}</a></li>\n'
        
        # Generate the complete HTML
        html_content = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - Auto-Generated Documentation</title>
    <link rel="stylesheet" href="assets/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
</head>
<body>
    <nav class="sidebar">
        <div class="nav-header">
            <h2><i class="fas fa-file-alt"></i> Documentation</h2>
        </div>
        <ul class="nav-menu">
{nav_html.rstrip()}
        </ul>
        
        <div class="search-container">
            <input type="text" id="search-input" placeholder="Search documentation...">
            <div id="search-results" class="search-results"></div>
        </div>
    </nav>

    <main class="main-content">
        <header class="content-header">
            <button class="mobile-nav-toggle" id="mobile-nav-toggle">
                <i class="fas fa-bars"></i>
            </button>
            <div class="breadcrumb">
                <span class="breadcrumb-item">{breadcrumb}</span>
            </div>
            <div class="header-actions">
                <button class="theme-toggle" id="theme-toggle">
                    <i class="fas fa-moon"></i>
                </button>
            </div>
        </header>

        <div class="content">
            <div class="content-meta">
                <p class="generated-date">Generated on <span id="generation-date"></span></p>
            </div>
            
            <h1><i class="{icon}"></i> {title}</h1>
            
            {content}

            <footer class="content-footer">
                <p><em>This documentation was automatically generated by the Auto Documentation Generation System.</em></p>
            </footer>
        </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script src="assets/js/main.js"></script>
    <script>
        // Set the generation date
        document.getElementById('generation-date').textContent = new Date().toLocaleString();
        
        // Initialize Mermaid if needed
        if (typeof mermaid !== 'undefined') {{
            mermaid.initialize({{ 
                startOnLoad: true,
                theme: 'default',
                themeVariables: {{
                    primaryColor: '#3f51b5',
                    primaryTextColor: '#ffffff',
                    primaryBorderColor: '#303f9f',
                    lineColor: '#757575',
                    sectionBkgColor: '#f5f5f5',
                    altSectionBkgColor: '#fafafa',
                    gridColor: '#e0e0e0',
                    secondaryColor: '#7986cb',
                    tertiaryColor: '#e8eaf6'
                }}
            }});
        }}
    </script>
</body>
</html>'''
        
        return html_content
    
    def create_api_page(self):
        """Create API reference page"""
        content = '''
            <div class="alert alert-info">
                This page documents the REST API endpoints and WebSocket connections available in the TraderWise system.
            </div>

            <h2 id="authentication">Authentication</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-key"></i>
                    <h3>JWT Authentication</h3>
                </div>
                <p>All API requests require a valid JWT token in the Authorization header:</p>
                <pre><code class="language-http">Authorization: Bearer &lt;your-jwt-token&gt;</code></pre>
            </div>

            <h2 id="endpoints">API Endpoints</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-chart-line"></i>
                    <h3>Market Data</h3>
                </div>
                <table>
                    <thead>
                        <tr><th>Method</th><th>Endpoint</th><th>Description</th></tr>
                    </thead>
                    <tbody>
                        <tr><td>GET</td><td>/api/v1/market/quotes</td><td>Get real-time market quotes</td></tr>
                        <tr><td>GET</td><td>/api/v1/market/history/{symbol}</td><td>Get historical price data</td></tr>
                        <tr><td>GET</td><td>/api/v1/market/indicators/{symbol}</td><td>Get technical indicators</td></tr>
                    </tbody>
                </table>
            </div>

            <div class="card">
                <div class="card-header">
                    <i class="fas fa-robot"></i>
                    <h3>AI Predictions</h3>
                </div>
                <table>
                    <thead>
                        <tr><th>Method</th><th>Endpoint</th><th>Description</th></tr>
                    </thead>
                    <tbody>
                        <tr><td>POST</td><td>/api/v1/ai/predict</td><td>Get price predictions</td></tr>
                        <tr><td>GET</td><td>/api/v1/ai/models</td><td>List available models</td></tr>
                        <tr><td>POST</td><td>/api/v1/ai/train</td><td>Trigger model training</td></tr>
                    </tbody>
                </table>
            </div>

            <div class="card">
                <div class="card-header">
                    <i class="fas fa-exchange-alt"></i>
                    <h3>Trading</h3>
                </div>
                <table>
                    <thead>
                        <tr><th>Method</th><th>Endpoint</th><th>Description</th></tr>
                    </thead>
                    <tbody>
                        <tr><td>POST</td><td>/api/v1/orders</td><td>Place a new order</td></tr>
                        <tr><td>GET</td><td>/api/v1/orders</td><td>List orders</td></tr>
                        <tr><td>DELETE</td><td>/api/v1/orders/{id}</td><td>Cancel an order</td></tr>
                        <tr><td>GET</td><td>/api/v1/portfolio</td><td>Get portfolio summary</td></tr>
                    </tbody>
                </table>
            </div>

            <h2 id="websocket">WebSocket API</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-plug"></i>
                    <h3>Real-time Connections</h3>
                </div>
                <p>Connect to WebSocket endpoint for real-time updates:</p>
                <pre><code class="language-javascript">
const ws = new WebSocket('wss://api.traderwise.com/ws');

// Subscribe to real-time quotes
ws.send(JSON.stringify({
    action: 'subscribe',
    channel: 'quotes',
    symbols: ['AAPL', 'GOOGL', 'MSFT']
}));
                </code></pre>
            </div>
        '''
        
        return self.generate_page({
            "name": "api.html",
            "title": "API Reference",
            "icon": "fas fa-code",
            "content": content,
            "breadcrumb": "API Reference"
        })
    
    def create_ai_models_page(self):
        """Create AI Models page"""
        content = '''
            <div class="alert alert-info">
                This page documents the machine learning models and AI components used in the TraderWise trading system.
            </div>

            <h2 id="lstm-models">LSTM Price Prediction Models</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-brain"></i>
                    <h3>Multi-timeframe LSTM</h3>
                </div>
                <p><strong>Purpose:</strong> Predict short-term and long-term price movements</p>
                <p><strong>Architecture:</strong> 3-layer LSTM with attention mechanism</p>
                <p><strong>Input Features:</strong> 50+ technical indicators, volume, market sentiment</p>
                <p><strong>Training Data:</strong> 5+ years of historical market data</p>
                
                <div class="alert alert-success">
                    <strong>Performance:</strong> 73% accuracy on 1-day predictions, 65% on 5-day predictions
                </div>
            </div>

            <h2 id="reinforcement-learning">Reinforcement Learning Models</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-cogs"></i>
                    <h3>Deep Q-Network (DQN) Trading Agent</h3>
                </div>
                <p><strong>Purpose:</strong> Learn optimal trading strategies through interaction</p>
                <p><strong>Architecture:</strong> Deep Q-Network with experience replay</p>
                <p><strong>Action Space:</strong> Buy, Sell, Hold with position sizing</p>
                <p><strong>Reward Function:</strong> Risk-adjusted returns with drawdown penalties</p>
            </div>

            <h2 id="ensemble-methods">Ensemble Methods</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-layer-group"></i>
                    <h3>Model Ensemble</h3>
                </div>
                <p>Combines multiple models for robust predictions:</p>
                <ul>
                    <li>LSTM for trend prediction</li>
                    <li>Random Forest for feature importance</li>
                    <li>XGBoost for non-linear patterns</li>
                    <li>SVM for volatility classification</li>
                </ul>
            </div>

            <h2 id="feature-engineering">Feature Engineering</h2>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-tools"></i>
                    <h3>Automated Feature Generation</h3>
                </div>
                <p>The system automatically generates over 100 features including:</p>
                <ul>
                    <li><strong>Technical Indicators:</strong> RSI, MACD, Bollinger Bands, etc.</li>
                    <li><strong>Price Patterns:</strong> Support/resistance levels, trend lines</li>
                    <li><strong>Market Sentiment:</strong> News sentiment, social media signals</li>
                    <li><strong>Volatility Metrics:</strong> ATR, VIX correlation, realized volatility</li>
                </ul>
            </div>
        '''
        
        return self.generate_page({
            "name": "ai_models.html",
            "title": "AI Models",
            "icon": "fas fa-robot",
            "content": content,
            "breadcrumb": "AI Models"
        })
    
    def create_remaining_pages(self):
        """Create all remaining HTML pages"""
        pages = {
            "api.html": self.create_api_page(),
            "ai_models.html": self.create_ai_models_page(),
        }
        
        for filename, content in pages.items():
            output_path = self.output_dir / filename
            output_path.write_text(content)
            print(f"Generated: {output_path}")


def main():
    generator = HTMLDocGenerator()
    generator.create_remaining_pages()
    print("✅ HTML documentation pages generated successfully!")
    print("\nNext steps:")
    print("1. Run 'mkdocs serve' in the autodoc directory to test the documentation")
    print("2. Customize the content in each HTML file as needed")
    print("3. Add more pages by extending the generator script")


if __name__ == "__main__":
    main()
